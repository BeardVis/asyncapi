@using Json.Pointer
@using System.Text.Json
@model SchemaViewModel
@{
    var schema = this.Model.Schema;
    var schemaJson = Neuroglia.Serialization.Json.JsonSerializer.Default.SerializeToElement(schema)!;
    var jsonType = schema.GetJsonType();
    var properties = schema.GetAllOf()?.Where(s => s.GetProperties() != null).SelectMany(s => s.GetProperties()!).GroupBy(s => s.Key).Select(g => g.Last()).ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
    schema.GetProperties()?.ToList().ForEach(p =>
    {
        properties ??= new();
        properties[p.Key] = p.Value;
    });
    if ((properties == null || !properties.Any()) && (properties == null || !properties.Any())) return;
    var required = schema.GetRequired();
}
@switch (jsonType)
{
    case SchemaValueType.Object:
        foreach(var property in properties)
        {
            var propertyType = property.Value.GetJsonType();
            var propertyRef = property.Value.GetRef();
            if (propertyType == null && propertyRef != null && propertyRef.OriginalString.StartsWith('#'))
            {
                var pointer = JsonPointer.Parse(propertyRef.OriginalString);
                var matchedElement = pointer.Evaluate(schemaJson.Value);
                if (matchedElement != null)
                {
                    var subSchema = JsonSchema.FromText(matchedElement.ToString()!);
                    propertyType = subSchema.GetJsonType();
                }
            }
            var propertyTypeName = propertyType.HasValue ? EnumHelper.Stringify(propertyType.Value).ToLowerInvariant() : "undefined";
            var constValue = property.Value.GetConst();
            var format = property.Value.GetFormat();
            var pattern = property.Value.GetPattern();
            var enumValue = property.Value.GetEnum();
            var description = property.Value.GetDescription();
            <div class="row mb-2 border-b">
                <div class="col-3 text-secondary fw-bold"><small>@property.Key</small></div>
                <div class="col text-center text-nowrap">
                    <span class="badge bg-secondary text-light">@propertyTypeName</span>
                    @if (required?.Contains(property.Key) == true)
                    {
                        <span class="badge border border-warning text-warning">required</span>
                    }
                    @if (constValue != null)
                    {
                        <span class="badge border border-secondary text-secondary">const</span>
                    }
                    @if (format != null)
                    {
                        <span class="badge border border-secondary text-secondary">format</span>
                    }
                    @if (pattern != null)
                    {
                        <span class="badge border border-secondary text-secondary">pattern</span>
                    }
                    @if (enumValue != null)
                    {
                        <span class="badge border border-secondary text-secondary">enum</span>
                    }
                </div>
                <div class="col"><small class="text-secondary">@description</small></div>
            </div>
        }
        break;
    default: break;
}
